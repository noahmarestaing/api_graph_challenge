{"version":3,"sources":["logo.svg","contexts/ResultPageContext.jsx","ResultPage/modules/Graph.jsx","icons/triangle.svg","icons/circle.svg","icons/square.svg","ResultPage/modules/GraphTable.jsx","ResultPage/modules/Summary.jsx","ResultPage/modules/Table.jsx","ResultPage/ResultPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["ResultPageContext","React","createContext","ResultPageProvider","props","useState","occupation","onet","title","region","id","type","summary","earnings","regional","national_avg","jobs","year","jobs_growth","start_year","end_year","trend_comparison","nation","state","employing_industries","industries","resultData","setResultData","Provider","value","getResultData","console","log","fetch","method","headers","Headers","Accept","then","r","json","children","Graph","d3Container","useRef","startYear","trendComparison","endYear","regionalData","stateData","nationData","maxAmount","minAmount","i","length","percentChange","push","x","y","useEffect","svg","d3","current","minDate","maxDate","graph","append","xscale","domain","range","yscale","x_axis","ticks","tickSize","tickFormat","y_axis","gX","call","attr","select","selectAll","line","d","datum","style","remove","className","width","height","ref","GraphTable","renderRow","val1","val2","val3","val4","val5","textStyle","icon","src","triangle","circle","square","Summary","jobsComparisonPercent","jobsComparison","jobsGrowthRegional","jobsGrowthNational","Table","employingIndustries","rows","in_occupation_jobs","toFixed","renderIndustryRows","ResultPage","resultPageContext","useContext","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c1ab850.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {useState, useContext} from 'react'\r\n\r\nexport const ResultPageContext = React.createContext(null)\r\n\r\nexport function useResultPageContext() {\r\n    return useContext(ResultPageContext)\r\n}\r\n\r\nfunction ResultPageProvider(props) {\r\n\r\n    const [resultData, setResultData] = useState({\r\n        occupation: {\r\n            onet: \"default\",\r\n            title: \"default\"\r\n        },\r\n        region: {\r\n            id: \"default\",\r\n            title: \"default\",\r\n            type: \"default\"\r\n        },\r\n        summary: {\r\n            earnings: {\r\n                regional: 0,\r\n                national_avg: 0,\r\n            },\r\n            jobs: {\r\n                year: 0,\r\n                regional: 0,\r\n                national_avg: 0,\r\n            },\r\n            jobs_growth: {\r\n                start_year: 0,\r\n                end_year: 0,\r\n                regional: 0,\r\n            }\r\n        },\r\n        trend_comparison: {\r\n            end_year: 0,\r\n            nation: [],\r\n            regional: [],\r\n            start_year: 0,\r\n            state: []\r\n        },\r\n        employing_industries: {\r\n            industries: [],\r\n            jobs: 0,\r\n            year: 0,\r\n        }  \r\n    })\r\n\r\n    function getResultData() {\r\n        console.log(\"getting result data\")\r\n        fetch(\"https://run.mocky.io/v3/a2cc3707-8691-4188-8413-6183a7bb3d32\", {\r\n            method: \"GET\",\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\",\r\n                Accept: \"application/json\"\r\n            })\r\n        }).then(r => {\r\n            return r.json()\r\n        }).then(r => {\r\n            console.log(r)\r\n            setResultData(r)\r\n            console.log(\"got result data\")\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ResultPageContext.Provider value={{\r\n            resultData,\r\n            getResultData,\r\n        }}>\r\n        {props.children}\r\n        </ResultPageContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ResultPageProvider","import React, {useState, useEffect, useRef} from 'react'\r\nimport * as d3 from 'd3'\r\n\r\nexport const Graph = (props) => {\r\n    const d3Container = useRef(null)\r\n\r\n    let startYear = props.trendComparison.start_year;\r\n    let endYear = props.trendComparison.end_year\r\n\r\n    let regionalData = []\r\n    let stateData = []\r\n    let nationData = []\r\n\r\n    let maxAmount = -100;\r\n    let minAmount = 100\r\n\r\n    for (let i = 0; i < props.trendComparison.regional.length; i++) {\r\n        let percentChange = (props.trendComparison.regional[i] - props.trendComparison.regional[0]) / props.trendComparison.regional[0] * 100;\r\n        \r\n        if (percentChange > maxAmount) maxAmount = percentChange\r\n        if (percentChange < minAmount) minAmount = percentChange\r\n\r\n        regionalData.push({\r\n            x: startYear + i,\r\n            y: percentChange\r\n        })\r\n    }\r\n\r\n    for (let i = 0; i < props.trendComparison.state.length; i++) {\r\n        let percentChange = (props.trendComparison.state[i] - props.trendComparison.state[0]) / props.trendComparison.state[0] * 100;\r\n        \r\n        if (percentChange > maxAmount) maxAmount = percentChange\r\n        if (percentChange < minAmount) minAmount = percentChange\r\n\r\n        stateData.push({\r\n            x: startYear + i,\r\n            y: percentChange\r\n        })\r\n    }\r\n\r\n    for (let i = 0; i < props.trendComparison.nation.length; i++) {\r\n        let percentChange = (props.trendComparison.nation[i] - props.trendComparison.nation[0]) / props.trendComparison.nation[0] * 100;\r\n        \r\n        if (percentChange > maxAmount) maxAmount = percentChange\r\n        if (percentChange < minAmount) minAmount = percentChange\r\n\r\n        nationData.push({\r\n            x: startYear + i,\r\n            y: percentChange\r\n        })\r\n    }\r\n\r\n    //dimensions of d3 graph svg\r\n    let w = 1200\r\n    let h = 500\r\n\r\n    //useEffect updates graph when data changes\r\n    useEffect(() => {\r\n\r\n        //initialize graph svg\r\n        const svg = d3.select(d3Container.current), \r\n            width = w,\r\n            height = h;\r\n\r\n        //bounds for the graph\r\n        \r\n        let minDate = startYear\r\n        let maxDate = endYear\r\n\r\n        let graph = svg.append('g')\r\n\r\n        let xscale = d3.scaleLinear()\r\n            .domain([minDate - 1, maxDate + 1])\r\n            .range([0, width]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n            .domain([minAmount - 10, maxAmount + 10])\r\n            .range([height, 0]);\r\n\r\n        let x_axis = d3.axisBottom(xscale)\r\n            .ticks(props.trendComparison.end_year - props.trendComparison.start_year + 2)\r\n            .tickSize(-500 + 20)\r\n            .tickFormat(d3.format(\"d\"));\r\n\r\n        let y_axis = d3.axisLeft(yscale)\r\n            .ticks(((maxAmount + 5) - (minAmount - 5)))\r\n            .tickSize(0);\r\n\r\n        //generate x axis\r\n        let gX = graph.append('g')\r\n            .call(x_axis)\r\n            .attr(\"transform\", \"translate(50, 480)\")\r\n            .attr(\"color\", \"gray\");\r\n\r\n        gX.select(\".domain\")\r\n            .attr(\"stroke\",\"#E04836\")\r\n            .attr(\"stroke-width\",\"6\")\r\n            .attr(\"opacity\",\"0\");\r\n\r\n        gX.selectAll(\".tick line\")\r\n            .attr(\"opacity\",\".3\");\r\n\r\n        //generate x axis\r\n        let gY = graph.append('g')\r\n            .call(y_axis)\r\n            .attr(\"transform\", \"translate(50, -20)\")\r\n            .attr(\"color\", \"gray\");\r\n\r\n        //function to generate line paths\r\n        var line = d3.line()\r\n            .x(function(d, i) {\r\n                return xscale(d.x);\r\n            })\r\n            .y(function(d, i) {\r\n                return yscale(d.y);\r\n            })\r\n            // .curve(d3.curveCatmullRom.alpha(.5));\r\n\r\n        //regional data line\r\n        graph.append(\"path\")\r\n            .datum(regionalData)\r\n            .attr(\"class\", \"line\")\r\n            .attr(\"d\", line)\r\n            .attr(\"fill\", \"none\")\r\n            .style(\"stroke\", \"rgb(7, 23, 65)\")\r\n            .style(\"stroke-width\", \"1\")\r\n            .attr(\"transform\", \"translate(50, -20)\");\r\n\r\n        //state data line\r\n        graph.append(\"path\")\r\n            .datum(stateData)\r\n            .attr(\"class\", \"line\")\r\n            .attr(\"d\", line)\r\n            .attr(\"fill\", \"none\")\r\n            .style(\"stroke\", \"rgb(27, 61, 153)\")\r\n            .style(\"stroke-width\", \"1\")\r\n            .attr(\"transform\", \"translate(50, -20)\");\r\n\r\n        //nation data line\r\n        graph.append(\"path\")\r\n            .datum(nationData)\r\n            .attr(\"class\", \"line\")\r\n            .attr(\"d\", line)\r\n            .attr(\"fill\", \"none\")\r\n            .style(\"stroke\", \"rgb(142, 212, 233)\")\r\n            .style(\"stroke-width\", \"1\")\r\n            .attr(\"transform\", \"translate(50, -20)\");\r\n\r\n        //remove old svg items when new items are generated\r\n        return () => {\r\n            svg.selectAll('*').remove();\r\n        }\r\n\r\n    }, [props.trendComparison])\r\n\r\n    \r\n\r\n    return (\r\n        <div id=\"Graph\">\r\n            <svg\r\n                className = \"d3-component\"\r\n                width = {w}\r\n                height = {h}\r\n                ref = {d3Container}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph","export default __webpack_public_path__ + \"static/media/triangle.35e80a8b.svg\";","export default __webpack_public_path__ + \"static/media/circle.73f4c070.svg\";","export default __webpack_public_path__ + \"static/media/square.c38d573c.svg\";","import React from 'react'\r\nimport '../css/GraphTable.css'\r\nimport triangle from '../../icons/triangle.svg'\r\nimport circle from '../../icons/circle.svg'\r\nimport square from '../../icons/square.svg'\r\n\r\nexport default function GraphTable (props) {\r\n\r\n    console.log(props.trendComparison)\r\n    function renderRow(val1, val2, val3, val4, val5, textStyle, icon) {\r\n        return (\r\n            <span id=\"TableRow\">\r\n                    <span id=\"GraphTableEntryLeft\"><span id={textStyle}>{icon}<span id=\"GraphTableTextPadding\">{val1}</span></span></span>\r\n                    <span id=\"GraphTableEntry\"><span id={textStyle}>{val2}</span></span>\r\n                    <span id=\"GraphTableEntry\"><span id={textStyle}>{val3}</span></span>\r\n                    <span id=\"GraphTableEntry\"><span id={textStyle}>{val4}</span></span>\r\n                    <span id=\"GraphTableEntry\"><span id={textStyle}>{val5}</span></span>\r\n            </span>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div id=\"GraphTable\">\r\n            {renderRow(\"Area\", props.trendComparison.start_year + \" Jobs\", props.trendComparison.end_year + \" Jobs\", \"Change\", \"%Change\", \"Text2Bold\", <img id=\"GraphTableIconPlaceholder\" src={triangle}/>)}\r\n            {renderRow(\"Region\", props.trendComparison.regional[0], props.trendComparison.regional[props.trendComparison.regional.length - 1],\r\n            (props.trendComparison.regional[props.trendComparison.regional.length - 1] - props.trendComparison.regional[0]),\r\n            ((props.trendComparison.regional[props.trendComparison.regional.length - 1] - props.trendComparison.regional[0]) / props.trendComparison.regional[0] * 100), \"Text2\", <img id=\"GraphTableIcon\" src={circle}/>)}\r\n\r\n            {renderRow(\"State\", props.trendComparison.state[0], props.trendComparison.state[props.trendComparison.state.length - 1],\r\n            (props.trendComparison.state[props.trendComparison.state.length - 1] - props.trendComparison.state[0]),\r\n            ((props.trendComparison.state[props.trendComparison.state.length - 1] - props.trendComparison.state[0]) / props.trendComparison.state[0] * 100), \"Text2\", <img id=\"GraphTableIcon\" src={square}/>)}\r\n        \r\n            {renderRow(\"Nation\", props.trendComparison.nation[0], props.trendComparison.nation[props.trendComparison.nation.length - 1],\r\n            (props.trendComparison.nation[props.trendComparison.nation.length - 1] - props.trendComparison.nation[0]),\r\n            ((props.trendComparison.nation[props.trendComparison.nation.length - 1] - props.trendComparison.nation[0]) / props.trendComparison.nation[0] * 100), \"Text2\", <img id=\"GraphTableIcon\" src={triangle}/>)}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport '../css/Summary.css'\r\n\r\nexport default function Summary (props) {\r\n    let jobsComparisonPercent = props.summary.jobs.regional / props.summary.jobs.national_avg * 100\r\n    let jobsComparison = <div>{jobsComparisonPercent}% <span id=\"GreenText\">above</span> national average</div>\r\n    if (jobsComparisonPercent < 0) jobsComparison = <div>{(-jobsComparisonPercent)}% <span id=\"RedText\">below</span> national average</div>\r\n    \r\n    let jobsGrowthRegional = <span id=\"GreenText\">+{props.summary.jobs_growth.regional}%</span>\r\n    if (props.summary.jobs_growth.regional < 0) jobsGrowthRegional = <span id=\"RedText\">-{-props.summary.jobs_growth.regional}</span>\r\n    \r\n    let jobsGrowthNational =  <div>Nation <span id=\"GreenText\">+{props.summary.jobs_growth.national_avg}%</span></div>\r\n    if (props.summary.jobs_growth.national_avg < 0) <div>Nation <span id=\"RedText\">-{props.summary.jobs_growth.national_avg}%</span></div>\r\n\r\n    return (\r\n        <div id=\"Summary\">\r\n\r\n            <span id=\"SummaryBoxLeft\">\r\n                <div id=\"Text1\">{props.summary.jobs.regional}</div>\r\n                <div id=\"Text2Bold\">Jobs ({props.summary.jobs.year})</div>\r\n                <div id=\"Text2\">{jobsComparison}</div>\r\n            </span>\r\n\r\n            <span id=\"SummaryBoxCenter\">\r\n                <div id=\"Text1\">{jobsGrowthRegional}</div>\r\n                <div id=\"Text2Bold\">%Change ({props.summary.jobs_growth.start_year}-{props.summary.jobs_growth.end_year}) </div>\r\n                <div id=\"Text2\">{jobsGrowthNational}</div>\r\n            </span>\r\n\r\n            <span id=\"SummaryBoxRight\">\r\n                <div id=\"Text1\">${props.summary.earnings.regional}/hr</div>\r\n                <div id=\"Text2Bold\">Median Hourly Earnings</div>\r\n                <div id=\"Text2\">Nation: ${props.summary.earnings.national_avg}/hr</div>\r\n            </span>\r\n\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport '../css/Table.css'\r\n\r\nexport default function Table (props) {\r\n\r\n    const [industryRows, setIndustryRows] = useState([])\r\n\r\n    console.log(props.trendComparison)\r\n    function renderRow(val1, val2, val3, val4, textStyle) {\r\n        return (\r\n            <span id=\"TableRow\">\r\n                    <span id=\"TableEntryLeft\"><span id={textStyle}>{val1}</span></span>\r\n                    <span id=\"TableEntry\"><span id={textStyle}>{val2}</span></span>\r\n                    <span id=\"TableEntry\"><span id={textStyle}>{val3}</span></span>\r\n                    <span id=\"TableEntry\"><span id={textStyle}>{val4}</span></span>\r\n            </span>\r\n        )\r\n    }\r\n\r\n    function renderIndustryRows(employingIndustries) {\r\n        let totalJobs = 0;\r\n        for (let i = 0; i < employingIndustries.industries.length; i++) {\r\n            totalJobs = totalJobs + employingIndustries.industries[i].jobs\r\n        }\r\n        let rows = []\r\n        for (let i = 0; i < employingIndustries.industries.length; i++) {\r\n            rows.push(\r\n                <div>\r\n                {renderRow(\r\n                    employingIndustries.industries[i].title, \r\n                    employingIndustries.industries[i].in_occupation_jobs,\r\n                    (employingIndustries.industries[i].in_occupation_jobs / employingIndustries.jobs * 100).toFixed(1) + \"%\",\r\n                    (employingIndustries.industries[i].in_occupation_jobs / employingIndustries.industries[i].jobs * 100).toFixed(1) + \"%\",\r\n                    \"Text2\"\r\n                )}\r\n                </div>\r\n            )\r\n        }\r\n        return (rows)\r\n    }\r\n\r\n    return (\r\n        <div id=\"Table\">\r\n            {renderRow(\"Industry\", \"Occupation Jobs in Industry (\" + props.employingIndustries.year + \")\", \r\n            \"Percent of Occupation in Industry (\" + props.employingIndustries.year + \")\", \r\n            \"Percent of Total Jobs in Industry (\" + props.employingIndustries.year + \")\", \"Text2Bold\")}\r\n\r\n            {renderIndustryRows(props.employingIndustries)}\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { useResultPageContext } from '../contexts/ResultPageContext'\r\nimport './css/ResultPage.css'\r\nimport './css/Variables.css'\r\nimport { Graph } from './modules/Graph'\r\nimport GraphTable from './modules/GraphTable'\r\nimport Summary from './modules/Summary'\r\nimport Table from './modules/Table'\r\n\r\nexport default function ResultPage (props) {\r\n\r\n    const resultPageContext = useResultPageContext()\r\n\r\n    //gets json data once on page load\r\n    useEffect(() => {\r\n        resultPageContext.getResultData()\r\n    }, [])\r\n\r\n    return (\r\n        <div id=\"ResultPageContent\">\r\n            <div id=\"ResultPageTitle\">Occupation Overview</div>\r\n            <div id=\"ResultPageSubTitle\">\r\n                {resultPageContext.resultData.occupation.title} in {resultPageContext.resultData.region.title}\r\n            </div>\r\n\r\n            <div id=\"ResultPageSectionTitle\">Occupation Summary for {resultPageContext.resultData.occupation.title}</div>\r\n            <Summary\r\n                summary={resultPageContext.resultData.summary}\r\n            />\r\n            <div id=\"ResultPageSectionTitle\">Regional Trends</div>\r\n            <Graph\r\n                trendComparison={resultPageContext.resultData.trend_comparison}\r\n            />\r\n            <GraphTable\r\n                trendComparison={resultPageContext.resultData.trend_comparison}\r\n            />\r\n\r\n            <div id=\"ResultPageSectionTitle\">Industries Employing {resultPageContext.resultData.occupation.title}</div>\r\n            <Table\r\n                employingIndustries={resultPageContext.resultData.employing_industries}\r\n            />\r\n\r\n            \r\n\r\n            \r\n        </div>\r\n    )\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport ResultPage from './ResultPage/ResultPage';\nimport ResultPageProvider from './contexts/ResultPageContext';\n\nfunction App() {\n  return (\n    <div>\n      <ResultPageProvider>\n      <ResultPage/>\n      </ResultPageProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}